# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FBOutput

import tdw.flatbuffers

class StaticRobot(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsStaticRobot(cls, buf, offset):
        n = tdw.flatbuffers.encode.Get(tdw.flatbuffers.packer.uoffset, buf, offset)
        x = StaticRobot()
        x.Init(buf, n + offset)
        return x

    # StaticRobot
    def Init(self, buf, pos):
        self._tab = tdw.flatbuffers.table.Table(buf, pos)

    # StaticRobot
    def Id(self):
        o = tdw.flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(tdw.flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # StaticRobot
    def BodyParts(self, j):
        o = tdw.flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += tdw.flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .StaticArticulationBody import StaticArticulationBody
            obj = StaticArticulationBody()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StaticRobot
    def BodyPartsLength(self):
        o = tdw.flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def StaticRobotStart(builder): builder.StartObject(2)
def StaticRobotAddId(builder, id): builder.PrependInt32Slot(0, id, 0)
def StaticRobotAddBodyParts(builder, bodyParts): builder.PrependUOffsetTRelativeSlot(1, tdw.flatbuffers.number_types.UOffsetTFlags.py_type(bodyParts), 0)
def StaticRobotStartBodyPartsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StaticRobotEnd(builder): return builder.EndObject()
